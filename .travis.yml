# taskcat ci config version v2
#  Python Versions
#  Python: 3.7
#
#  Create development builds (Triggered by commit to develop branch)
#  - Builds pypi package to https://test.pypi.org/project/taskcat/
#  - Tags development builds
#
dist: xenial
language: python

branches:
  only:
  - master

python:
  - "3.6"
  - "3.7"
before_install:
  - pip install -r requirements.txt
  - pip install -r dev-requirements.txt
  - cd /tmp
  - GIT_SECRETS_RELEASE=1.3.0
  - wget https://github.com/awslabs/git-secrets/archive/${GIT_SECRETS_RELEASE}.tar.gz
  - tar -xvf ${GIT_SECRETS_RELEASE}.tar.gz
  - cd git-secrets-${GIT_SECRETS_RELEASE}/
  - sudo make install
  - cd ${TRAVIS_BUILD_DIR}
install:
  - pip install .
script: pre-commit run --all-files
after_success:
  - coverage run ./setup.py test > /dev/null
  - codecov --token=$CODECOV_TOKEN

jobs:
  include:
  # - stage: "Functional test"
  #   name: "taskcat (sample-taskcat-project/ci/taskcat-autobucket.yml)"
  #   if: branch =~ /(release.*|develop|master)/ AND commit_message !~ /(Bump)/ AND type = push
  #   before_script:
  #   script:
  #   - cd examples && pwd
  #   - mkdir ~/.aws/ &&  cp sample-taskcat-project/ci/taskcat_global_override.json  ~/.aws/taskcat_global_override.json
  #   - taskcat -c sample-taskcat-project/ci/taskcat-autobucket.yml -A $AKEY -S $SKEY && export MERGE_TO_MASTER=true

  - stage: "[Version Bump] Check/Create Release PR"
    name: "[Version Bump] Check/Create Release PR"
    if: branch = master AND commit_message !~ /(Bump|Release taskcat)/
    before_script:
    - |
      pip install bump2version
      HUB_DIST=linux-amd64
      HUB_VERSION=$(curl -w "%{url_effective}\n" -I -L -s -S github.com/github/hub/releases/latest -o /dev/null | awk -F'releases/tag/v' '{ print $2 }')
      curl "https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-${HUB_DIST}-${HUB_VERSION}.tgz" -L | tar xvz && sudo ./hub-${HUB_DIST}-${HUB_VERSION}/install && rm -r ./hub-${HUB_DIST}-${HUB_VERSION}
    - mkdir -p ~/.config/taskcat
    - |
      echo -e "github.com:\n- user: taskcat-ci\n  oauth_token: ${GHT}\n  protocol: https" > ~/.config/hub
    - cat ~/.config/hub
    script:
      - export RELEASE_ID=$(cut -f1-2 -d . VERSION)
      - export ORIGINAL_VERSION=$(cat VERSION)
      - git checkout "release/v${RELEASE_ID}" ||  git checkout -b "release/v${RELEASE_ID}"
      - bumpversion --no-commit --allow-dirty --no-tag patch
      - bumpversion --commit --allow-dirty --no-tag release --message "Bump Version - Creating a new minor version"
      - export NEW_VERSION=$(cat VERSION)
      - git push "https://${GHT}:@github.com/${TRAVIS_REPO_SLUG}" "release/v${RELEASE_ID}" --force || travis_terminate 1
      - |
          OPEN_PR=$(hub pr list -s open --base master --head "release/v${RELEASE_ID}" -L 1 -f "%I")
          if [ -z "${OPEN_PR}" ]; then
            hub pull-request -m "Release taskcat [${NEW_VERSION}]"  -h "release/v${RELEASE_ID}"
          fi
      - |
          OPEN_PR=$(hub pr list -s open --base master --head "release/v${RELEASE_ID}" -L 1 -f "%I")
          LAST_RELEASE_COMMIT=$(git rev-list --tags --max-count=1)
          TAG_BODY=$(git --no-pager log --no-merges --oneline ${LAST_RELEASE_COMMIT}..HEAD  --pretty='- %h %s')
          hub api -XPATCH repos/${TRAVIS_REPO_SLUG}/issues/${OPEN_PR} -f body="${TAG_BODY}"

  - stage: "[Version Bump] Create PyPI Development release"
    name: "[Version Bump] Create PyPI Development release"
    if: branch = master AND commit_message !~ /(Bump|Release taskcat)/
    before_script:
      - pip install bump2version
      - export TEST_PYPI_VERSION=$(python -c "import requests; version = requests.get('https://test.pypi.org/pypi/taskcat/json').json()['info']['version'];print(version)")
      - export TEST_PYPI_RELEASE_ID=$(echo ${TEST_PYPI_VERSION} | cut -f1-2 -d .)
      - export RELEASE_ID=$(cut -f1-2 -d . VERSION)
    script:
      - |
        if [[ "${RELEASE_ID}" != "${TEST_PYPI_RELEASE_ID}" ]]; then
          export TEST_PYPI_NEW_VERSION="$(cat VERSION)-dev0-${TRAVIS_COMMIT:0:7}"
        else
          BUMPVERSION_STUB=$(bumpversion --dry-run --current-version ${TEST_PYPI_VERSION} build --list | egrep -i 'new_version' | sed -e 's/new_version=//g')
          export TEST_PYPI_NEW_VERSION="${BUMPVERSION_STUB}-${TRAVIS_COMMIT:0:7}"
        fi
      - echo "${TEST_PYPI_NEW_VERSION}" > VERSION
      - cat VERSION
      - travis_terminate 0
    # deploy:
    #   - provider: pypi
    #     user: $PYPI_USER
    #     password: $PYPI_PASSWORD
    #     server: https://test.pypi.org/legacy/
    #     if: fork = false
    #     on:
    #       branch: master
    # after_deploy:
    #   - echo "Deployment complete"

  - stage: "Build documentation"
    name: "build documentation in gh-pages"
    if: branch = master AND commit_message =~ /(Release taskcat)/ AND sender == taskcat-ci
    script:
      - |
        pip3 install mkdocs mkdocs-material pymdown-extensions pygments pdoc3
        cd *github.io
        python3 -m mkdocs gh-deploy --config-file  ../mkdocs.yml

  - stage: "Tag next release & include changelog"
    name: "Tag next release & include changelog"
    if: branch = master AND commit_message =~ /(Release taskcat)/ AND sender == taskcat-ci
    script:
      - |
        LAST_RELEASE_COMMIT=$(git rev-list --tags --max-count=1)
        TAG_BODY=$(git --no-pager log --no-merges --oneline ${LAST_RELEASE_COMMIT}..HEAD  --pretty='- %h %s')
        git tag -a "$(cat VERSION)" -m "${TAG_BODY}"
        git push --tags "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
    deploy:
      - provider: releases
        skip_cleanup: true
        api_key: "$GHT"
        file: directory/*
        on:
          branch: master

  # - stage: "Build Production PyPI and Production Docker"
  #   name: "Build Production PyPI and Production Docker"
  #   if: branch = master AND commit_message =~ /(Release taskcat)/ AND sender == taskcat-ci
  #   script:
  #     - |
  #       LAST_RELEASE_COMMIT=$(git rev-list --tags --max-count=1)
  #       TAG_BODY=$(git --no-pager log --no-merges --oneline ${LAST_RELEASE_COMMIT}..HEAD  --pretty='- %h %s')
  #       git tag -a "$(cat VERSION)" -m "${TAG_BODY}"
  #       git push --tags "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
  #   # deploy:
  #   #   - provider: pypi
  #   #     user: $PYPI_USER
  #   #     password: $PYPI_PASSWORD
  #   #     on:
  #   #       branch: master
